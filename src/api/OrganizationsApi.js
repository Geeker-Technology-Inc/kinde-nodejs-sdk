/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrganizationUsersRequest from '../model/AddOrganizationUsersRequest';
import AddOrganizationUsersResponse from '../model/AddOrganizationUsersResponse';
import CreateOrganizationRequest from '../model/CreateOrganizationRequest';
import CreateOrganizationResponse from '../model/CreateOrganizationResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetOrganizationsResponse from '../model/GetOrganizationsResponse';
import GetOrganizationsUsersResponse from '../model/GetOrganizationsUsersResponse';
import Organization from '../model/Organization';
import RemoveOrganizationUsersRequest from '../model/RemoveOrganizationUsersRequest';
import RemoveOrganizationUsersResponse from '../model/RemoveOrganizationUsersResponse';
import SuccessResponse from '../model/SuccessResponse';
import UpdateOrganizationRequest from '../model/UpdateOrganizationRequest';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 1
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrganizationUsers operation.
     * @callback module:api/OrganizationsApi~addOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddOrganizationUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users to an Organization
     * Add existing users to an organization.
     * @param {String} orgCode The organization's code.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrganizationUsersRequest} opts.addOrganizationUsersRequest 
     * @param {module:api/OrganizationsApi~addOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddOrganizationUsersResponse}
     */
    addOrganizationUsers(orgCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrganizationUsersRequest'];
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling addOrganizationUsers");
      }

      let pathParams = {
        'org_code': orgCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = AddOrganizationUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationsApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Organization
     * Create an organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationRequest} opts.createOrganizationRequest Organization details.
     * @param {module:api/OrganizationsApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationResponse}
     */
    createOrganization(opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = CreateOrganizationResponse;
      return this.apiClient.callApi(
        '/api/v1/organization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationFeatureFlagOverride operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationFeatureFlagOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization feature flag override
     * Delete organization feature flag override.
     * @param {String} orgCode The identifier for the organization.
     * @param {String} featureFlagKey The identifier for the feature flag.
     * @param {module:api/OrganizationsApi~deleteOrganizationFeatureFlagOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    deleteOrganizationFeatureFlagOverride(orgCode, featureFlagKey, callback) {
      let postBody = null;
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling deleteOrganizationFeatureFlagOverride");
      }
      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling deleteOrganizationFeatureFlagOverride");
      }

      let pathParams = {
        'org_code': orgCode,
        'feature_flag_key': featureFlagKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationFeatureFlagOverrides operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationFeatureFlagOverridesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all organization feature flag overrides
     * Delete all organization feature flag overrides.
     * @param {String} orgCode The identifier for the organization.
     * @param {module:api/OrganizationsApi~deleteOrganizationFeatureFlagOverridesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    deleteOrganizationFeatureFlagOverrides(orgCode, callback) {
      let postBody = null;
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling deleteOrganizationFeatureFlagOverrides");
      }

      let pathParams = {
        'org_code': orgCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/feature_flags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganization operation.
     * @callback module:api/OrganizationsApi~getOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization
     * Gets an organization given the organization's code. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.code The organization's code.
     * @param {module:api/OrganizationsApi~getOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    getOrganization(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/v1/organization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationUsers operation.
     * @callback module:api/OrganizationsApi~getOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationsUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Organization Users
     * Get users in an organization.
     * @param {String} orgCode The organization's code.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Field and order to sort the result by.
     * @param {Number} opts.pageSize Number of results per page. Defaults to 10 if parameter not sent.
     * @param {String} opts.nextToken A string to get the next page of results if there are more results.
     * @param {String} opts.permissions Filter by user permissions
     * @param {module:api/OrganizationsApi~getOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationsUsersResponse}
     */
    getOrganizationUsers(orgCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling getOrganizationUsers");
      }

      let pathParams = {
        'org_code': orgCode
      };
      let queryParams = {
        'sort': opts['sort'],
        'page_size': opts['pageSize'],
        'next_token': opts['nextToken'],
        'permissions': opts['permissions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = GetOrganizationsUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations operation.
     * @callback module:api/OrganizationsApi~getOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Organizations
     * Get a list of organizations. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Field and order to sort the result by.
     * @param {Number} opts.pageSize Number of results per page. Defaults to 10 if parameter not sent.
     * @param {String} opts.nextToken A string to get the next page of results if there are more results.
     * @param {module:api/OrganizationsApi~getOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationsResponse}
     */
    getOrganizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'page_size': opts['pageSize'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = GetOrganizationsResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOrganizationUsers operation.
     * @callback module:api/OrganizationsApi~removeOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveOrganizationUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users from an Organization
     * Remove existing users from an organization.
     * @param {String} orgCode The organization's code.
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveOrganizationUsersRequest} opts.removeOrganizationUsersRequest 
     * @param {module:api/OrganizationsApi~removeOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveOrganizationUsersResponse}
     */
    removeOrganizationUsers(orgCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeOrganizationUsersRequest'];
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling removeOrganizationUsers");
      }

      let pathParams = {
        'org_code': orgCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = RemoveOrganizationUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationsApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Organization
     * Update an organization.
     * @param {String} orgCode The identifier for the organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationRequest} opts.updateOrganizationRequest Organization details.
     * @param {module:api/OrganizationsApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganization(orgCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateOrganizationRequest'];
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling updateOrganization");
      }

      let pathParams = {
        'org_code': orgCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationFeatureFlagOverride operation.
     * @callback module:api/OrganizationsApi~updateOrganizationFeatureFlagOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization feature flag override
     * Update organization feature flag override.
     * @param {String} orgCode The identifier for the organization
     * @param {String} featureFlagKey The identifier for the feature flag
     * @param {String} value Override value
     * @param {module:api/OrganizationsApi~updateOrganizationFeatureFlagOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    updateOrganizationFeatureFlagOverride(orgCode, featureFlagKey, value, callback) {
      let postBody = null;
      // verify the required parameter 'orgCode' is set
      if (orgCode === undefined || orgCode === null) {
        throw new Error("Missing the required parameter 'orgCode' when calling updateOrganizationFeatureFlagOverride");
      }
      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling updateOrganizationFeatureFlagOverride");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling updateOrganizationFeatureFlagOverride");
      }

      let pathParams = {
        'org_code': orgCode,
        'feature_flag_key': featureFlagKey
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
