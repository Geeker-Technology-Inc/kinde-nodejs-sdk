/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrganizationUsersRequest from '../model/AddOrganizationUsersRequest';
import AddOrganizationUsersResponse from '../model/AddOrganizationUsersResponse';
import CreateUserRequest from '../model/CreateUserRequest';
import CreateUserResponse from '../model/CreateUserResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetOrganizationsUsersResponse from '../model/GetOrganizationsUsersResponse';
import RemoveOrganizationUsersRequest from '../model/RemoveOrganizationUsersRequest';
import RemoveOrganizationUsersResponse from '../model/RemoveOrganizationUsersResponse';
import SuccessResponse from '../model/SuccessResponse';
import UpdateUserRequest from '../model/UpdateUserRequest';
import User from '../model/User';
import UsersResponse from '../model/UsersResponse';

/**
* Users service.
* @module api/UsersApi
* @version 1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrganizationUsers operation.
     * @callback module:api/UsersApi~addOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddOrganizationUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users to an Organization
     * Add existing users to an organization.
     * @param {Object} opts Optional parameters
     * @param {String} opts.code The organization's code.
     * @param {module:model/AddOrganizationUsersRequest} opts.addOrganizationUsersRequest 
     * @param {module:api/UsersApi~addOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddOrganizationUsersResponse}
     */
    addOrganizationUsers(opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrganizationUsersRequest'];

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = AddOrganizationUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organization/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUserRequest} opts.createUserRequest The details of the user to create.
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    createUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['createUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/api/v1/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteuser operation.
     * @callback module:api/UsersApi~deleteuserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete a user record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The user's id.
     * @param {module:api/UsersApi~deleteuserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    deleteuser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/api/v1/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationUsers operation.
     * @callback module:api/UsersApi~getOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationsUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Organization Users
     * Get users in an organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Field and order to sort the result by.
     * @param {Number} opts.pageSize Number of results per page. Defaults to 10 if parameter not sent.
     * @param {String} opts.nextToken A string to get the next page of results if there are more results.
     * @param {String} opts.code The organization's code.
     * @param {String} opts.permissions Filter by user permissions
     * @param {module:api/UsersApi~getOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationsUsersResponse}
     */
    getOrganizationUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'page_size': opts['pageSize'],
        'next_token': opts['nextToken'],
        'code': opts['code'],
        'permissions': opts['permissions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = GetOrganizationsUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organization/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserData operation.
     * @callback module:api/UsersApi~getUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Retrieve a user record. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The user's id.
     * @param {module:api/UsersApi~getUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/v1/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Field and order to sort the result by.
     * @param {Number} opts.pageSize Number of results per page. Defaults to 10 if parameter not sent.
     * @param {String} opts.userId ID of the user to filter by.
     * @param {String} opts.nextToken A string to get the next page of results if there are more results.
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersResponse}
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'page_size': opts['pageSize'],
        'user_id': opts['userId'],
        'next_token': opts['nextToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = UsersResponse;
      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOrganizationUsers operation.
     * @callback module:api/UsersApi~removeOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveOrganizationUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users from an Organization
     * Remove existing users from an organization.
     * @param {Object} opts Optional parameters
     * @param {String} opts.code The organization's code.
     * @param {module:model/RemoveOrganizationUsersRequest} opts.removeOrganizationUsersRequest 
     * @param {module:api/UsersApi~removeOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveOrganizationUsersResponse}
     */
    removeOrganizationUsers(opts, callback) {
      opts = opts || {};
      let postBody = opts['removeOrganizationUsersRequest'];

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = RemoveOrganizationUsersResponse;
      return this.apiClient.callApi(
        '/api/v1/organization/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Update a user record. 
     * @param {module:model/UpdateUserRequest} updateUserRequest The user to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The user's id.
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUser(updateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRequest;
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/json; charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/v1/user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
