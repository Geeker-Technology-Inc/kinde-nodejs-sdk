/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetRedirectCallbackUrlsResponse from '../model/GetRedirectCallbackUrlsResponse';

/**
* Callbacks service.
* @module api/CallbacksApi
* @version 1
*/
export default class CallbacksApi {

    /**
    * Constructs a new CallbacksApi. 
    * @alias module:api/CallbacksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRedirectCallbackURLs operation.
     * @callback module:api/CallbacksApi~addRedirectCallbackURLsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Redirect Callback URLs
     * Add additional redirect callback URLs. 
     * @param {String} appId The identifier for the application.
     * @param {Array.<String>} urls Array of callback urls.
     * @param {module:api/CallbacksApi~addRedirectCallbackURLsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRedirectCallbackURLs(appId, urls, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling addRedirectCallbackURLs");
      }
      // verify the required parameter 'urls' is set
      if (urls === undefined || urls === null) {
        throw new Error("Missing the required parameter 'urls' when calling addRedirectCallbackURLs");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'urls': this.apiClient.buildCollectionParam(urls, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/applications/{app_id}/auth_redirect_urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallbackURLs operation.
     * @callback module:api/CallbacksApi~getCallbackURLsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRedirectCallbackUrlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Callback URLs
     * Returns an application's redirect callback URLs. 
     * @param {String} appId The identifier for the application.
     * @param {module:api/CallbacksApi~getCallbackURLsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRedirectCallbackUrlsResponse}
     */
    getCallbackURLs(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCallbackURLs");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = GetRedirectCallbackUrlsResponse;
      return this.apiClient.callApi(
        '/api/v1/applications/{app_id}/auth_redirect_urls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceRedirectCallbackURLs operation.
     * @callback module:api/CallbacksApi~replaceRedirectCallbackURLsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace redirect callback URLs
     * Replace all redirect callback URLs. 
     * @param {String} appId The identifier for the application.
     * @param {Array.<String>} urls Array of callback urls.
     * @param {module:api/CallbacksApi~replaceRedirectCallbackURLsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replaceRedirectCallbackURLs(appId, urls, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling replaceRedirectCallbackURLs");
      }
      // verify the required parameter 'urls' is set
      if (urls === undefined || urls === null) {
        throw new Error("Missing the required parameter 'urls' when calling replaceRedirectCallbackURLs");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'urls': this.apiClient.buildCollectionParam(urls, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['kindeBearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/applications/{app_id}/auth_redirect_urls', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
